# BEGIN (write your solution here)
def toggle(flag: str, in_set: set) -> None:
    if flag in in_set:
        in_set.discard(flag)
    else:
        in_set.add(flag)


def toggled(flag: str, in_set: set) -> set:
    result = in_set.copy()
    toggle(flag, result)
    return result
# END


# В этой практике вы будете реализовывать функции для работы с множествами, как с наборами флагов.

# Флаги помогают управлять работой некоторого кода: если флаг поднят, значит какая-то возможность включена. В этом плане флаги похожи на галочки в формах и бланках — галочку тоже можно поставить или не поставить.

# В нашем случае флаги будут представлять собой элементы множества: если элемент в множестве присутствует, значит и флаг поднят. Вам же нужно будет реализовать две функции: toggle() и toggled().

# Функция toggle()
# Эта функция должна принимать в качестве аргументов:

# Один флаг
# Множество
# Если флаг уже присутствует в множестве, его нужно убрать. Если же флаг отсутствует, то его нужно добавить. Таким образом функция будет переключать состояние флага. Множество нужно заменять по месту, возвращать из функции ничего не нужно.

# Посмотрим на пример использования функции toggle():

# READ_ONLY = 'read_only'
# flags = set()
# toggle(READ_ONLY, flags)
# READ_ONLY in flags  # True
# toggle(READ_ONLY, flags)
# READ_ONLY in flags  # False
# Функция toggled()
# Эта функция работает похожим на toggle() образом. Вместо изменения исходного множества эта функция возвращает новое множество — с уже переключенным флагом. Посмотрим на примере:

# READ_ONLY = 'read_only'
# flags = set()
# new_flags = toggled(READ_ONLY, flags)
# READ_ONLY in flags  # False
# READ_ONLY in new_flags  # True