def smallest_divisor(number: int, divisor = 2):
    if number == 1:
        return number
    if number % divisor == 0:
        return divisor
    return smallest_divisor(number, divisor + 1)


def main():
    print(smallest_divisor(121))
    print(smallest_divisor(4))
    print(smallest_divisor(17))
    return


if __name__ == "__main__":
    main()


# solution.py
# Реализуйте функцию smallest_divisor(), используя итеративный процесс. Функция должна находить наименьший делитель заданного числа. Число, передаваемое в функцию, больше нуля.

# Дополнительное условие: делитель должен быть больше единицы, за исключением случая, когда аргументом является единица (наименьшим делителем которой является также единица).

# Например, наименьший делитель числа 15 это 3.

# Пример:

# smallest_divisor(15) # 3
# smallest_divisor(17) #17
# Идея алгоритма:

# Попробуйте разделить число на 2
# Если число делится без остатка, то это наименьший делитель
# Если нет, то попробуйте следующий делитель
# Если ничего не делит число без остатка, то переданное число является простым, так что его наименьший делитель — оно само (не считая 1)
# Подсказки:
# Вспомните про оператор % (modulus или остаток от деления). Он вычисляет остаток от деления одного операнда на другой. Например, 11 % 5 = 1, а 10 % 2 = 0. Так что если x % y это 0, то y делит x без остатка